{"version":3,"file":"static/js/881.76fd40c7.chunk.js","mappings":"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","sources":["api/tmdb_api.js","webpack://react-homework-template/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx"],"sourcesContent":["const BASIC_URL = `https://api.themoviedb.org/3`;\nconst searchParam = new URLSearchParams({\n  api_key: '44d6575d8f8dedfd36c7023de34a30c4',\n});\n\n//Function to fetch trending movies\nexport async function fetchTitles() {\n  try {\n    const response = await fetch(\n      `${BASIC_URL}/trending/movie/day?${searchParam}`\n    );\n    const parsed = await response.json();\n    const titles = parsed.results;\n    return titles;\n  } catch (error) {\n    throw new Error(console.log(error));\n  }\n}\n\n//Function to fetch searched movies\nexport async function fetchMovies(searchQuery) {\n  const searchParam = new URLSearchParams({\n    api_key: '44d6575d8f8dedfd36c7023de34a30c4',\n    query: searchQuery,\n  });\n  try {\n    const response = await fetch(`${BASIC_URL}/search/movie?${searchParam}`);\n    const parsed = await response.json();\n    const titles = parsed.results;\n    return titles;\n  } catch (error) {\n    throw new Error(console.log(error));\n  }\n}\n\n//Function to fetch movie details\nexport async function fetchMovieDetails(movieId) {\n  try {\n    const response = await fetch(\n      `${BASIC_URL}/movie/${movieId}?${searchParam}`\n    );\n    const parsed = await response.json();\n    return parsed;\n  } catch (error) {\n    throw new Error(console.log(error));\n  }\n}\n\n//Function to fetch movie cast\nexport async function fetchMovieCast(movieId) {\n  try {\n    const response = await fetch(\n      `${BASIC_URL}/movie/${movieId}/credits?${searchParam}`\n    );\n    const parsed = await response.json();\n    return parsed;\n  } catch (error) {\n    throw new Error(console.log(error));\n  }\n}\n\n//Function to fetch movie reviews\nexport async function fetchMovieReviews(movieId) {\n  try {\n    const response = await fetch(\n      `${BASIC_URL}/movie/${movieId}/reviews?${searchParam}`\n    );\n    const parsed = await response.json();\n    return parsed;\n  } catch (error) {\n    throw new Error(console.log(error));\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Movies_list__hqYjd\",\"link\":\"Movies_link__MzAfU\",\"item\":\"Movies_item__Ba4aJ\",\"form\":\"Movies_form__4ow+Z\",\"button\":\"Movies_button__GcIka\",\"input\":\"Movies_input__KrUqs\"};","import { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { fetchMovies } from 'api/tmdb_api';\nimport s from './Movies.module.css';\n\nfunction Movies() {\n  const [movies, setMovies] = useState([]);\n  const [status, setStatus] = useState('idle');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('name') ?? '';\n  const location = useLocation();\n\n  const updateQueryString = name => {\n    const nextParams = name !== '' ? { name } : {};\n    setSearchParams(nextParams);\n  };\n\n  useEffect(() => {\n    async function fetching() {\n      const result = await fetchMovies(searchQuery);\n      if (result.length === 0) {\n        return setStatus('rejected');\n      }\n      setMovies(result);\n      setStatus('loaded');\n    }\n    if (!searchQuery) {\n      return;\n    }\n    fetching();\n  }, [searchQuery]);\n\n  //Method to handle search submit\n  //Prevents page reloading\n  const onHandleSubmit = async e => {\n    e.preventDefault();\n    if (!e.currentTarget.search.value.trim()) {\n      throw new Error('Empty string is not allowed!');\n    }\n    updateQueryString(e.currentTarget.search.value);\n  };\n\n  return (\n    <>\n      <form onSubmit={onHandleSubmit} className={s.form}>\n        <input\n          type=\"text\"\n          name=\"search\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          className={s.input}\n        />\n        <button type=\"submit\" className={s.button}>\n          <span>Search</span>\n        </button>\n      </form>\n      {status === 'idle' && <div>Try to seach something!</div>}\n      {status === 'rejected' && <div>Nothing found, folks!</div>}\n      {status === 'loaded' && (\n        <ul className={s.list}>\n          {movies.map(movie => (\n            <li key={movie.id} className={s.item}>\n              <Link\n                to={`${movie.id}`}\n                state={{ from: location }}\n                className={s.link}\n              >\n                {movie.title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n\nexport default Movies;\n"],"names":["BASIC_URL","searchParam","URLSearchParams","api_key","fetchTitles","fetch","response","json","parsed","titles","results","Error","console","log","fetchMovies","searchQuery","query","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews","useState","movies","setMovies","status","setStatus","useSearchParams","searchParams","setSearchParams","get","location","useLocation","useEffect","result","length","fetching","onHandleSubmit","e","preventDefault","currentTarget","search","value","trim","name","onSubmit","className","s","type","autoComplete","autoFocus","placeholder","map","movie","to","id","state","from","title"],"sourceRoot":""}