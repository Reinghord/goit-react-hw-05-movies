{"version":3,"file":"static/js/186.933eec40.chunk.js","mappings":"sSAAMA,EAAS,+BACTC,EAAc,IAAIC,gBAAgB,CACtCC,QAAS,qCAIJ,SAAeC,IAAtB,+B,aAAO,O,oBAAA,iHAEoBC,MAAM,GAAD,OACvBL,EADuB,+BACSC,IAHlC,cAEGK,EAFH,gBAKkBA,EAASC,OAL3B,cAKGC,EALH,OAMGC,EAASD,EAAOE,QANnB,kBAOID,GAPJ,wCASG,IAAIE,MAAMC,QAAQC,IAAR,OATb,iFAcA,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAA2BC,GAA3B,oFACCd,EAAc,IAAIC,gBAAgB,CACtCC,QAAS,mCACTa,MAAOD,IAHJ,kBAMoBV,MAAM,GAAD,OAAIL,EAAJ,yBAA8BC,IANvD,cAMGK,EANH,gBAOkBA,EAASC,OAP3B,cAOGC,EAPH,OAQGC,EAASD,EAAOE,QARnB,kBASID,GATJ,wCAWG,IAAIE,MAAMC,QAAQC,IAAR,OAXb,kFAgBA,SAAeI,EAAtB,kC,aAAO,O,oBAAA,WAAiCC,GAAjC,kGAEoBb,MAAM,GAAD,OACvBL,EADuB,kBACJkB,EADI,YACOjB,IAHhC,cAEGK,EAFH,gBAKkBA,EAASC,OAL3B,cAKGC,EALH,yBAMIA,GANJ,wCAQG,IAAIG,MAAMC,QAAQC,IAAR,OARb,iFAaA,SAAeM,EAAtB,kC,aAAO,O,oBAAA,WAA8BD,GAA9B,kGAEoBb,MAAM,GAAD,OACvBL,EADuB,kBACJkB,EADI,oBACejB,IAHxC,cAEGK,EAFH,gBAKkBA,EAASC,OAL3B,cAKGC,EALH,yBAMIA,GANJ,wCAQG,IAAIG,MAAMC,QAAQC,IAAR,OARb,iFAaA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAiCF,GAAjC,kGAEoBb,MAAM,GAAD,OACvBL,EADuB,kBACJkB,EADI,oBACejB,IAHxC,cAEGK,EAFH,gBAKkBA,EAASC,OAL3B,cAKGC,EALH,yBAMIA,GANJ,wCAQG,IAAIG,MAAMC,QAAQC,IAAR,OARb,iF,yGC5BP,UA9BA,WACE,OAA8BQ,EAAAA,EAAAA,YAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KAEMC,GAASC,EAAAA,EAAAA,MAWf,OARAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,qGACuBN,EAAAA,EAAAA,IAAkBI,EAAON,SADhD,OACQS,EADR,OAEEJ,EAAWI,GAFb,4CADc,uBAAC,WAAD,wBAKdC,EACD,GAAE,CAACJ,KAGF,0BACE,wBACGF,GAAqC,IAA1BA,EAAQO,cAChBP,EAAQZ,QAAQoB,KAAI,SAAAC,GAAM,OACxB,2BACE,qCAAaA,EAAOC,WACpB,uBAAID,EAAOE,YAFJF,EAAOG,GADQ,IAM1B,+BAIX,C","sources":["api/tmdb_api.js","components/Reviews/Reviews.jsx"],"sourcesContent":["const BASIC_URL = `https://api.themoviedb.org/3`;\nconst searchParam = new URLSearchParams({\n  api_key: '44d6575d8f8dedfd36c7023de34a30c4',\n});\n\n//Function to fetch trending movies\nexport async function fetchTitles() {\n  try {\n    const response = await fetch(\n      `${BASIC_URL}/trending/movie/day?${searchParam}`\n    );\n    const parsed = await response.json();\n    const titles = parsed.results;\n    return titles;\n  } catch (error) {\n    throw new Error(console.log(error));\n  }\n}\n\n//Function to fetch searched movies\nexport async function fetchMovies(searchQuery) {\n  const searchParam = new URLSearchParams({\n    api_key: '44d6575d8f8dedfd36c7023de34a30c4',\n    query: searchQuery,\n  });\n  try {\n    const response = await fetch(`${BASIC_URL}/search/movie?${searchParam}`);\n    const parsed = await response.json();\n    const titles = parsed.results;\n    return titles;\n  } catch (error) {\n    throw new Error(console.log(error));\n  }\n}\n\n//Function to fetch movie details\nexport async function fetchMovieDetails(movieId) {\n  try {\n    const response = await fetch(\n      `${BASIC_URL}/movie/${movieId}?${searchParam}`\n    );\n    const parsed = await response.json();\n    return parsed;\n  } catch (error) {\n    throw new Error(console.log(error));\n  }\n}\n\n//Function to fetch movie cast\nexport async function fetchMovieCast(movieId) {\n  try {\n    const response = await fetch(\n      `${BASIC_URL}/movie/${movieId}/credits?${searchParam}`\n    );\n    const parsed = await response.json();\n    return parsed;\n  } catch (error) {\n    throw new Error(console.log(error));\n  }\n}\n\n//Function to fetch movie reviews\nexport async function fetchMovieReviews(movieId) {\n  try {\n    const response = await fetch(\n      `${BASIC_URL}/movie/${movieId}/reviews?${searchParam}`\n    );\n    const parsed = await response.json();\n    return parsed;\n  } catch (error) {\n    throw new Error(console.log(error));\n  }\n}\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'api/tmdb_api';\n\nfunction Reviews() {\n  const [reviews, setReviews] = useState();\n\n  const params = useParams();\n\n  //Fetching reviews on mounting\n  useEffect(() => {\n    async function fetchDetails() {\n      const result = await fetchMovieReviews(params.movieId);\n      setReviews(result);\n    }\n    fetchDetails();\n  }, [params]);\n\n  return (\n    <div>\n      <ul>\n        {reviews && reviews.total_results !== 0\n          ? reviews.results.map(review => (\n              <li key={review.id}>\n                <h3>Author: {review.author}</h3>\n                <p>{review.content}</p>\n              </li>\n            ))\n          : 'No reviews for this film.'}\n      </ul>\n    </div>\n  );\n}\n\nexport default Reviews;\n"],"names":["BASIC_URL","searchParam","URLSearchParams","api_key","fetchTitles","fetch","response","json","parsed","titles","results","Error","console","log","fetchMovies","searchQuery","query","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews","useState","reviews","setReviews","params","useParams","useEffect","result","fetchDetails","total_results","map","review","author","content","id"],"sourceRoot":""}