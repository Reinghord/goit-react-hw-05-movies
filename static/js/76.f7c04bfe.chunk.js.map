{"version":3,"file":"static/js/76.f7c04bfe.chunk.js","mappings":"qSAAMA,EAAS,+BACTC,EAAc,IAAIC,gBAAgB,CACtCC,QAAS,qCAIJ,SAAeC,IAAtB,+B,aAAO,O,oBAAA,iHAEoBC,MAAM,GAAD,OACvBL,EADuB,+BACSC,IAHlC,cAEGK,EAFH,gBAKkBA,EAASC,OAL3B,cAKGC,EALH,OAMGC,EAASD,EAAOE,QANnB,kBAOID,GAPJ,wCASG,IAAIE,MAAMC,QAAQC,IAAR,OATb,iFAcA,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAA2BC,GAA3B,oFACCd,EAAc,IAAIC,gBAAgB,CACtCC,QAAS,mCACTa,MAAOD,IAHJ,kBAMoBV,MAAM,GAAD,OAAIL,EAAJ,yBAA8BC,IANvD,cAMGK,EANH,gBAOkBA,EAASC,OAP3B,cAOGC,EAPH,OAQGC,EAASD,EAAOE,QARnB,kBASID,GATJ,wCAWG,IAAIE,MAAMC,QAAQC,IAAR,OAXb,kFAgBA,SAAeI,EAAtB,kC,aAAO,O,oBAAA,WAAiCC,GAAjC,kGAEoBb,MAAM,GAAD,OACvBL,EADuB,kBACJkB,EADI,YACOjB,IAHhC,cAEGK,EAFH,gBAKkBA,EAASC,OAL3B,cAKGC,EALH,yBAMIA,GANJ,wCAQG,IAAIG,MAAMC,QAAQC,IAAR,OARb,iFAaA,SAAeM,EAAtB,kC,aAAO,O,oBAAA,WAA8BD,GAA9B,kGAEoBb,MAAM,GAAD,OACvBL,EADuB,kBACJkB,EADI,oBACejB,IAHxC,cAEGK,EAFH,gBAKkBA,EAASC,OAL3B,cAKGC,EALH,yBAMIA,GANJ,wCAQG,IAAIG,MAAMC,QAAQC,IAAR,OARb,iFAaA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAiCF,GAAjC,kGAEoBb,MAAM,GAAD,OACvBL,EADuB,kBACJkB,EADI,oBACejB,IAHxC,cAEGK,EAFH,gBAKkBA,EAASC,OAL3B,cAKGC,EALH,yBAMIA,GANJ,wCAQG,IAAIG,MAAMC,QAAQC,IAAR,OARb,iF,qIC7DP,EAAuB,mBAAvB,EAAiD,mB,SC4CjD,MAxCA,WACE,OAA8BQ,EAAAA,EAAAA,YAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KAEMC,GAASC,EAAAA,EAAAA,MAef,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAK,IACYC,EADb,mCACF,qGACuBR,EAAAA,EAAAA,IAAeK,EAAON,SAD7C,OACQU,EADR,OAEEL,EAAWK,GAFb,2CADE,qDAKFD,GAGD,CAFC,MAAOE,GACPjB,QAAQC,IAAIgB,EACb,CACF,GAAE,CAACL,KAGF,0BACE,eAAIM,UAAWC,EAAf,SACGT,GACCA,EAAQU,KAAKC,KAAI,SAAAD,GAAI,OACnB,gBAAkBF,UAAWC,EAA7B,UACGC,EAAKE,eACJ,gBACEC,IAAG,0CAAqCH,EAAKE,cAC7CE,IAAKJ,EAAKK,KACVC,MAAM,SAGV,6BAAKN,EAAKK,SACV,uCAAeL,EAAKO,eATbP,EAAKQ,GADK,OAgB9B,C","sources":["api/tmdb_api.js","webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx"],"sourcesContent":["const BASIC_URL = `https://api.themoviedb.org/3`;\nconst searchParam = new URLSearchParams({\n  api_key: '44d6575d8f8dedfd36c7023de34a30c4',\n});\n\n//Function to fetch trending movies\nexport async function fetchTitles() {\n  try {\n    const response = await fetch(\n      `${BASIC_URL}/trending/movie/day?${searchParam}`\n    );\n    const parsed = await response.json();\n    const titles = parsed.results;\n    return titles;\n  } catch (error) {\n    throw new Error(console.log(error));\n  }\n}\n\n//Function to fetch searched movies\nexport async function fetchMovies(searchQuery) {\n  const searchParam = new URLSearchParams({\n    api_key: '44d6575d8f8dedfd36c7023de34a30c4',\n    query: searchQuery,\n  });\n  try {\n    const response = await fetch(`${BASIC_URL}/search/movie?${searchParam}`);\n    const parsed = await response.json();\n    const titles = parsed.results;\n    return titles;\n  } catch (error) {\n    throw new Error(console.log(error));\n  }\n}\n\n//Function to fetch movie details\nexport async function fetchMovieDetails(movieId) {\n  try {\n    const response = await fetch(\n      `${BASIC_URL}/movie/${movieId}?${searchParam}`\n    );\n    const parsed = await response.json();\n    return parsed;\n  } catch (error) {\n    throw new Error(console.log(error));\n  }\n}\n\n//Function to fetch movie cast\nexport async function fetchMovieCast(movieId) {\n  try {\n    const response = await fetch(\n      `${BASIC_URL}/movie/${movieId}/credits?${searchParam}`\n    );\n    const parsed = await response.json();\n    return parsed;\n  } catch (error) {\n    throw new Error(console.log(error));\n  }\n}\n\n//Function to fetch movie reviews\nexport async function fetchMovieReviews(movieId) {\n  try {\n    const response = await fetch(\n      `${BASIC_URL}/movie/${movieId}/reviews?${searchParam}`\n    );\n    const parsed = await response.json();\n    return parsed;\n  } catch (error) {\n    throw new Error(console.log(error));\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__GlWio\",\"item\":\"Cast_item__a0CDL\"};","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'api/tmdb_api';\nimport s from './Cast.module.css';\n\nfunction Cast() {\n  const [details, setDetails] = useState();\n\n  const params = useParams();\n\n  //Fetching movie cast on mounting object\n  useEffect(() => {\n    try {\n      async function fetchMovie() {\n        const result = await fetchMovieCast(params.movieId);\n        setDetails(result);\n      }\n      fetchMovie();\n    } catch (error) {\n      console.log(error);\n    }\n  }, [params]);\n\n  return (\n    <div>\n      <ul className={s.list}>\n        {details &&\n          details.cast.map(cast => (\n            <li key={cast.id} className={s.item}>\n              {cast.profile_path && (\n                <img\n                  src={`https://image.tmdb.org/t/p/w500/${cast.profile_path}`}\n                  alt={cast.name}\n                  width=\"100\"\n                />\n              )}\n              <p> {cast.name}</p>\n              <p>Character: {cast.character}</p>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Cast;\n"],"names":["BASIC_URL","searchParam","URLSearchParams","api_key","fetchTitles","fetch","response","json","parsed","titles","results","Error","console","log","fetchMovies","searchQuery","query","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews","useState","details","setDetails","params","useParams","useEffect","fetchMovie","result","error","className","s","cast","map","profile_path","src","alt","name","width","character","id"],"sourceRoot":""}